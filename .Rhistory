r2.test <- round(summary(reg.test)$r.squared,2)
rmse.train <- round(rmse(attr.train$mean_ki, m1$predicted),2)
rmse.test <- round(rmse(attr.test$mean_ki, pred.m1),2)
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim, labels=expression("R"^2 ~ "Train =" ~ r2.train))
#paste0("Cor train = ",r2.train))
text(x=lim-0.1, y=lim, labels=paste0("Cor test = ",r2.test))
abline(reg1)
abline(reg2, col="grey")
abline(0,1,lty=2,col="grey")
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim, labels=expression("R"^2 ~ "Train =" ~ r2.train))
#paste0("Cor train = ",r2.train))
text(x=lim-0.1, y=lim, labels=paste0("Cor test = ",r2.test))
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
r2.train
expression("R"^2 ~ "Train =" ~ r2.train)
expression("R"^2 ~ "Train =", r2.train)
paste0(expression("R"^2 ~ "Train ="),r2.train)
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim, labels=paste0(expression("R"^2 ~ "Train ="),r2.train))
#paste0("Cor train = ",r2.train))
text(x=lim-0.1, y=lim, labels=paste0("Cor test = ",r2.test))
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
sprintf(expression("R"^2 ~ "Train = %s"),r2.train)
r2.train
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim, labels=sprintf(expression("R"^2 ~ "Train = %s"),r2.train))
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim, labels=expression("R"^2 ~ "Train = "r2.train))
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim, labels=expression("R"^2 ~ "Train = "~ paste0(r2.train)))
#paste0("Cor train = ",r2.train))
text(x=lim-0.1, y=lim, labels=paste0("Cor test = ",r2.test))
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim, labels=paste0("R2 = ", r2.train, "\nRMSE = ", rmse.train))
#paste0("Cor train = ",r2.train))
text(x=lim-0.1, y=lim, labels=paste0("Cor test = ",r2.test))
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim, labels=paste0("R2 = ", r2.train, "\nRMSE = ", rmse.train))
#paste0("Cor train = ",r2.train))
text(x=lim-0.1, y=lim, labels=paste0("Cor test = ",r2.test))
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.1, labels=paste0("R2 = ", r2.train, "\nRMSE = ", rmse.train))
#paste0("Cor train = ",r2.train))
text(x=lim-0.1, y=lim, labels=paste0("Cor test = ",r2.test))
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.01, labels=paste0("R2 = ", r2.train, "\nRMSE = ", rmse.train))
#paste0("Cor train = ",r2.train))
text(x=lim-0.1, y=lim, labels=paste0("Cor test = ",r2.test))
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.01, labels=paste0("R2 = ", r2.train, "\nRMSE = ", rmse.train))
text(x=lim-0.1, y=lim-0.01, labels=paste0("R2 = ", r2.test, "\nRMSE = ", rmse.test))
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s")
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.01, labels=paste0("R2 Train = ", r2.train, "\nRMSE Train = ", rmse.train), cex=0.75)
text(x=lim-0.1, y=lim-0.01, labels=paste0("R2 Val = ", r2.test, "\nRMSE Val = ", rmse.test), cex=0.75)
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
m1$test
m1$test$mse
sqrt(m1$mse)
sqrt(m1$mse[which.min(m1$mse)])
#--- 2. ANALYSIS: RF model - Advanced and tuning ----
sqrt(4)
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s", las=1)
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.01, labels=paste0("R2 Train = ", r2.train, "\nRMSE Train = ", rmse.train), cex=0.75)
text(x=lim-0.1, y=lim-0.01, labels=paste0("R2 Val = ", r2.test, "\nRMSE Val = ", rmse.test), cex=0.75)
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s", las=1, cex.axis=0.75)
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.01, labels=paste0("R2 Train = ", r2.train, "\nRMSE Train = ", rmse.train), cex=0.75)
text(x=lim-0.1, y=lim-0.01, labels=paste0("R2 Val = ", r2.test, "\nRMSE Val = ", rmse.test), cex=0.75)
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
par(pty="s", las=1, cex.axis=0.8)
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s", las=1, cex.axis=0.8)
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.01, labels=paste0("R2 Train = ", r2.train, "\nRMSE Train = ", rmse.train), cex=0.75)
text(x=lim-0.1, y=lim-0.01, labels=paste0("R2 Val = ", r2.test, "\nRMSE Val = ", rmse.test), cex=0.75)
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=4, height=4)
par(pty="s", las=1, cex.axis=0.8)
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.01, labels=paste0("R2 Train = ", r2.train, "\nRMSE Train = ", rmse.train), cex=0.75)
text(x=lim-0.1, y=lim-0.01, labels=paste0("R2 Val = ", r2.test, "\nRMSE Val = ", rmse.test), cex=0.75)
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=4.5, height=4.5)
par(pty="s", las=1, cex.axis=0.8)
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.01, labels=paste0("R2 Train = ", r2.train, "\nRMSE Train = ", rmse.train), cex=0.75)
text(x=lim-0.1, y=lim-0.01, labels=paste0("R2 Val = ", r2.test, "\nRMSE Val = ", rmse.test), cex=0.75)
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
# save plot
pdf("./Results/Regression_analysis/obsVpre-k-defaultRF.pdf", width=5, height=5)
par(pty="s", las=1, cex.axis=0.8)
plot(attr.train$mean_ki, m1$predicted, xlim=c(0,lim),ylim=c(0,lim), pch=19, cex=0.75,
main=sprintf("Validation of %s data point with %s training data sample", no.test, no.train),
cex.main=0.75, xlab="Observed mean ki", ylab="Predicted ki")
points(attr.test$mean_ki, pred.m1, pch=19, cex=0.75, col="grey")
text(x=lim-0.25, y=lim-0.01, labels=paste0("R2 Train = ", r2.train, "\nRMSE Train = ", rmse.train), cex=0.75)
text(x=lim-0.1, y=lim-0.01, labels=paste0("R2 Val = ", r2.test, "\nRMSE Val = ", rmse.test), cex=0.75)
abline(reg.train)
abline(reg.test, col="grey")
abline(0,1,lty=2,col="grey")
box()
dev.off()
attr.train[attr.list]
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 5,
stepFactor = 1.5,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
m2
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 2,
stepFactor = 1.5,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 5,
stepFactor = 1,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 1,
stepFactor = 1,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 1,
stepFactor = 2,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 5,
stepFactor = 1.5,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
#--- 2. ANALYSIS: RF model - Advanced and tuning ----
set.seed(601)
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 5,
stepFactor = 1.5,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
#--- 2. ANALYSIS: RF model - Advanced and tuning ----
set.seed(601)
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 5,
stepFactor = 1.5,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
#--- 2. ANALYSIS: RF model - Advanced and tuning ----
set.seed(601)
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 3,
stepFactor = 1.5,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
#--- 2. ANALYSIS: RF model - Advanced and tuning ----
set.seed(601)
m2 <- tuneRF(
x          = attr.train[attr.list],
y          = attr.train$mean_ki,
ntreeTry   = 500,
mtryStart  = 4,
stepFactor = 1.5,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
m2
m1$type
m1
#--- grid search for best RF parameter search ---
hyper.grid <- expand.grid(
mtry = seq(2, length(attr.list), by=1),
node_size = seq(3, 9, by = 2),
sample_size = c(.55, .632, .70, .80),
OOB_RMSE   = 0
)
nrow(hyper.grid)
View(hyper.grid)
View(attr.train)
for(i in 1:nrow(hyper.grid)){
# train model
model <- ranger(
formula = mean_ki ~ .,
data = attr.train,
num.trees = 500,
mtry = hyper.grid$mtry[i],
min.node.size = hyper.grid$node_size[i],
sample.fraction = hyper.grid$sampe_size[i],
seed = 123
)
# add OOB error to grid
hyper.grid$OOB_RMSE[i] <- sqrt(model$prediction.error)
}
View(attr.train)
hyper.grid$sampe_size[i]
View(hyper.grid)
hyper.grid$sampe_size[1]
for(i in 1:nrow(hyper.grid)){
# train model
model <- ranger(
formula = mean_ki ~ .,
data = attr.train,
num.trees = 500,
mtry = hyper.grid$mtry[i],
min.node.size = hyper.grid$node_size[i],
sample.fraction = hyper.grid$sample_size[i],
seed = 123
)
# add OOB error to grid
hyper.grid$OOB_RMSE[i] <- sqrt(model$prediction.error)
}
hyper_grid %>%
dplyr::arrange(OOB_RMSE) %>%
head(10)
library(ggplot2)
library(ranger)
library(caret)
library(maps)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
hyper_grid %>%
dplyr::arrange(OOB_RMSE) %>%
head(10)
library("dplyr")
hyper_grid %>%
dplyr::arrange(OOB_RMSE) %>%
head(10)
hyper.grid %>%
dplyr::arrange(OOB_RMSE) %>%
head(10)
model
hyper.grid %>%
dplyr::arrange(OOB_RMSE) %>%
head(10) %>%
best.grid
set <- hyper.grid %>%
dplyr::arrange(OOB_RMSE) %>%
head(10)
set
# let repeat RF with best parameter settings
OOB_RMSE <- vector(mode = "numeric", length = 100)
set$mtry[1]
# let repeat RF with best parameter settings
OOB_RMSE <- vector(mode = "numeric", length = 100)
for(i in seq_along(OOB_RMSE)){
model <- ranger(
formula = mean_ki ~ .,
data = attr.train,
num.trees = 500,
mtry = set$mtry[1],
min.node.size = set$node_size[1],
sample.fraction = set$sample_size[1],
importance = "impurity"
)
}
# let repeat RF with best parameter settings
OOB_RMSE <- vector(mode = "numeric", length = 100)
for(i in seq_along(OOB_RMSE)){
opt.ranger <- ranger(
formula = mean_ki ~ .,
data = attr.train,
num.trees = 500,
mtry = set$mtry[1],
min.node.size = set$node_size[1],
sample.fraction = set$sample_size[1],
importance = "impurity"
)
}
# let repeat RF with best parameter settings
OOB_RMSE <- vector(mode = "numeric", length = 100)
for(i in seq_along(OOB_RMSE)){
opt.ranger <- ranger(
formula = mean_ki ~ .,
data = attr.train,
num.trees = 500,
mtry = set$mtry[1],
min.node.size = set$node_size[1],
sample.fraction = set$sample_size[1],
importance = "impurity"
)
OOB_RMSE[i] <- sqrt(opt.ranger$prediction.error)
}
hist(OOB_RMSE, breaks = 20)
imp.df <- data.frame(opt.ranger$variable.importance)
imp.df
imp.df.row <- row.names(imp.df)
ord <- order(imp.df[,1], decreasing = T)
imp.df <- imp.df[ord,]
imp.df.row <- imp.df.row[ord]
imp.df.row
imp.df
imp.df <- as.data.frame(cbind(imp.df.row,imp.df))
imp.df
colnames(imp.df) <- c("variables", "x")
imp.df[(1:25), ] %>%
ggplot(aes(reorder(variables, as.numeric(x)), as.numeric(x)))+
geom_col() +
xlab("Variables") +
ylab("x") +
coord_flip() +
ggtitle("Top 25 important variables")
imp.df
imp.df[(1:length(attr.list)), ] %>%
ggplot(aes(reorder(variables, as.numeric(x)), as.numeric(x)))+
geom_col() +
xlab("Variables") +
ylab("x") +
coord_flip() +
ggtitle("Top 25 important variables")
ggsave(filename = "./Results/Regression_analysis/attributes-importance.pdf")
